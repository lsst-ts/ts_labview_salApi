module MTMount {
	 const long MTMount_shared_SummaryState_DisabledState=1;
	 const long MTMount_shared_SummaryState_EnabledState=2;
	 const long MTMount_shared_SummaryState_FaultState=3;
	 const long MTMount_shared_SummaryState_OfflineState=4;
	 const long MTMount_shared_SummaryState_StandbyState=5;
	struct azimuth {
	  double	private_rcvStamp;    //private
	  double	actualPosition;
	  double	demandPosition;
	  double	actualVelocity;
	  double	demandVelocity;
	  double	actualAcceleration;
	  double	actualTorque;
	  double	timestamp;
	};
	#pragma keylist azimuth
	struct azimuthDrives {
	  double	private_rcvStamp;    //private
	  double	current[16];
	  double	timestamp;
	};
	#pragma keylist azimuthDrives
	struct cameraCableWrap {
	  double	private_rcvStamp;    //private
	  double	actualPosition;
	  double	actualVelocity;
	  double	actualAcceleration;
	  double	timestamp;
	};
	#pragma keylist cameraCableWrap
	struct command_abort {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_abort
	struct command_clearError {
	  double	private_rcvStamp;    //private
	  long	mask;
	};
	#pragma keylist command_clearError
	struct command_closeMirrorCovers {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_closeMirrorCovers
	struct command_disable {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_disable
	struct command_disableCameraCableWrapFollowing {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_disableCameraCableWrapFollowing
	struct command_enable {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_enable
	struct command_enableCameraCableWrapFollowing {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_enableCameraCableWrapFollowing
	struct command_enterControl {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_enterControl
	struct command_exitControl {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_exitControl
	struct command_moveToTarget {
	  double	private_rcvStamp;    //private
	  double	azimuth;
	  double	elevation;
	};
	#pragma keylist command_moveToTarget
	struct command_openMirrorCovers {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_openMirrorCovers
	struct command_setAuthList {
	  double	private_rcvStamp;    //private
	  string	authorizedUsers;
	  string	nonAuthorizedCSCs;
	};
	#pragma keylist command_setAuthList
	struct command_setLogLevel {
	  double	private_rcvStamp;    //private
	  long	level;
	};
	#pragma keylist command_setLogLevel
	struct command_setValue {
	  double	private_rcvStamp;    //private
	  string<256>	parametersAndValues;
	};
	#pragma keylist command_setValue
	struct command_standby {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_standby
	struct command_start {
	  double	private_rcvStamp;    //private
	  string<256>	settingsToApply;
	};
	#pragma keylist command_start
	struct command_startTracking {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_startTracking
	struct command_stop {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_stop
	struct command_stopTracking {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_stopTracking
	struct command_trackTarget {
	  double	private_rcvStamp;    //private
	  double	azimuth;
	  double	azimuthVelocity;
	  double	elevation;
	  double	elevationVelocity;
	  double	taiTime;
	  long	trackId;
	  string	tracksys;
	  string	radesys;
	};
	#pragma keylist command_trackTarget
	struct elevation {
	  double	private_rcvStamp;    //private
	  double	actualPosition;
	  double	demandPosition;
	  double	actualVelocity;
	  double	demandVelocity;
	  double	actualAcceleration;
	  double	actualTorque;
	  double	timestamp;
	};
	#pragma keylist elevation
	struct elevationDrives {
	  double	private_rcvStamp;    //private
	  double	current[12];
	  double	timestamp;
	};
	#pragma keylist elevationDrives
	struct logevent_appliedSettingsMatchStart {
	  double	private_rcvStamp;    //private
	  boolean	appliedSettingsMatchStartIsTrue;
	  long	priority;
	};
	#pragma keylist logevent_appliedSettingsMatchStart
	struct logevent_authList {
	  double	private_rcvStamp;    //private
	  string	authorizedUsers;
	  string	nonAuthorizedCSCs;
	  long	priority;
	};
	#pragma keylist logevent_authList
	struct logevent_availableSettings {
	  double	private_rcvStamp;    //private
	  string	names;
	  string	descriptions;
	  string	createdDates;
	  string	modifiedDates;
	  long	priority;
	};
	#pragma keylist logevent_availableSettings
	 const long MTMount_shared_AxisMotionState_Stopping=0;
	 const long MTMount_shared_AxisMotionState_Stopped=1;
	 const long MTMount_shared_AxisMotionState_MovingPointToPoint=2;
	 const long MTMount_shared_AxisMotionState_Jogging=3;
	 const long MTMount_shared_AxisMotionState_Tracking=4;
	 const long MTMount_shared_AxisMotionState_TrackingPaused=5;
	 const long MTMount_shared_Commander_None=0;
	 const long MTMount_shared_Commander_CSC=1;
	 const long MTMount_shared_Commander_EUI=2;
	 const long MTMount_shared_Commander_HHD=3;
	 const long MTMount_shared_DeployableMotionState_Retracted=0;
	 const long MTMount_shared_DeployableMotionState_Deployed=1;
	 const long MTMount_shared_DeployableMotionState_Retracting=2;
	 const long MTMount_shared_DeployableMotionState_Deploying=3;
	 const long MTMount_shared_DeployableMotionState_Lost=4;
	 const long MTMount_shared_LimitsMask_L1Min=0x01;
	 const long MTMount_shared_LimitsMask_L1Max=0x02;
	 const long MTMount_shared_LimitsMask_L2Min=0x03;
	 const long MTMount_shared_LimitsMask_L2Max=0x04;
	 const long MTMount_shared_LimitsMask_L3Min=0x05;
	 const long MTMount_shared_LimitsMask_L3Max=0x06;
	 const long MTMount_shared_LimitsMask_AdjustableL1Min=0x07;
	 const long MTMount_shared_LimitsMask_AdjustableL1Max=0x08;
	 const long MTMount_shared_LimitsMask_OperationalL1Min=0x09;
	 const long MTMount_shared_LimitsMask_OperationalL1Max=0x10;
	 const long MTMount_shared_ElevationLockingPinMotionState_Locked=0;
	 const long MTMount_shared_ElevationLockingPinMotionState_Test=1;
	 const long MTMount_shared_ElevationLockingPinMotionState_Unlocked=2;
	 const long MTMount_shared_ElevationLockingPinMotionState_Moving=3;
	 const long MTMount_shared_ElevationLockingPinMotionState_Mismatch=4;
	 const long MTMount_shared_PowerState_Off=0;
	 const long MTMount_shared_PowerState_On=1;
	 const long MTMount_shared_PowerState_Fault=2;
	 const long MTMount_shared_PowerState_TurningOn=3;
	 const long MTMount_shared_PowerState_TurningOff=4;
	 const long MTMount_shared_PowerState_Unknown=15;
	 const long MTMount_shared_System_Azimuth=0;
	 const long MTMount_shared_System_Elevation=1;
	 const long MTMount_shared_System_CameraCableWrap=2;
	 const long MTMount_shared_System_Balance=3;
	 const long MTMount_shared_System_MirrorCovers=4;
	 const long MTMount_shared_System_MirrorCoverLocks=5;
	 const long MTMount_shared_System_AzimuthCableWrap=6;
	 const long MTMount_shared_System_LockingPins=7;
	 const long MTMount_shared_System_DeployablePlatforms=8;
	 const long MTMount_shared_System_OilSupplySystem=9;
	 const long MTMount_shared_System_AzimuthDrivesThermal=10;
	 const long MTMount_shared_System_ElevationDrivesThermal=11;
	 const long MTMount_shared_System_AZ0101CabinetThermal=12;
	 const long MTMount_shared_System_ModbusTemperatureControllers=13;
	 const long MTMount_shared_System_MainCabinet=14;
	 const long MTMount_shared_System_MainAxesPowerSupply=15;
	 const long MTMount_shared_System_TopEndChiller=16;
	struct logevent_az0101CabinetThermalSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  boolean	trackAmbient;
	  double	setTemperature;
	  long	priority;
	};
	#pragma keylist logevent_az0101CabinetThermalSystemState
	struct logevent_azimuthCableWrapSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	motionControllerState[2];
	  long	priority;
	};
	#pragma keylist logevent_azimuthCableWrapSystemState
	struct logevent_azimuthDrivesThermalSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	elementPowerState[4];
	  boolean	trackAmbient[4];
	  double	setTemperature[4];
	  long	priority;
	};
	#pragma keylist logevent_azimuthDrivesThermalSystemState
	struct logevent_azimuthInPosition {
	  double	private_rcvStamp;    //private
	  boolean	inPosition;
	  long	priority;
	};
	#pragma keylist logevent_azimuthInPosition
	struct logevent_azimuthLimits {
	  double	private_rcvStamp;    //private
	  unsigned long	limits;
	  long	priority;
	};
	#pragma keylist logevent_azimuthLimits
	struct logevent_azimuthMotionState {
	  double	private_rcvStamp;    //private
	  long	state;
	  long	priority;
	};
	#pragma keylist logevent_azimuthMotionState
	struct logevent_azimuthSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	motionControllerState[16];
	  long	priority;
	};
	#pragma keylist logevent_azimuthSystemState
	struct logevent_azimuthToppleBlock {
	  double	private_rcvStamp;    //private
	  boolean	reverse;
	  boolean	forward;
	  long	priority;
	};
	#pragma keylist logevent_azimuthToppleBlock
	struct logevent_balanceSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	elementPowerState[4];
	  long	motionControllerState[4];
	  long	priority;
	};
	#pragma keylist logevent_balanceSystemState
	struct logevent_cameraCableWrapFollowing {
	  double	private_rcvStamp;    //private
	  long	enabled;
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapFollowing
	struct logevent_cameraCableWrapInPosition {
	  double	private_rcvStamp;    //private
	  boolean	inPosition;
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapInPosition
	struct logevent_cameraCableWrapLimits {
	  double	private_rcvStamp;    //private
	  unsigned long	limits;
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapLimits
	struct logevent_cameraCableWrapMotionState {
	  double	private_rcvStamp;    //private
	  long	state;
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapMotionState
	struct logevent_cameraCableWrapSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	motionControllerState[2];
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapSystemState
	struct logevent_cameraCableWrapTarget {
	  double	private_rcvStamp;    //private
	  double	position;
	  double	velocity;
	  double	taiTime;
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapTarget
	struct logevent_commander {
	  double	private_rcvStamp;    //private
	  long	commander;
	  long	priority;
	};
	#pragma keylist logevent_commander
	struct logevent_connected {
	  double	private_rcvStamp;    //private
	  boolean	command;
	  boolean	replies;
	  long	priority;
	};
	#pragma keylist logevent_connected
	struct logevent_deployablePlatformsMotionState {
	  double	private_rcvStamp;    //private
	  unsigned short	state;
	  unsigned short	elementState[2];
	  long	priority;
	};
	#pragma keylist logevent_deployablePlatformsMotionState
	struct logevent_deployablePlatformsSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	elementPowerState[2];
	  long	motionControllerState[4];
	  long	priority;
	};
	#pragma keylist logevent_deployablePlatformsSystemState
	struct logevent_elevationDrivesThermalSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	elementPowerState[2];
	  boolean	trackAmbient[2];
	  double	setTemperature[2];
	  long	priority;
	};
	#pragma keylist logevent_elevationDrivesThermalSystemState
	struct logevent_elevationInPosition {
	  double	private_rcvStamp;    //private
	  boolean	inPosition;
	  long	priority;
	};
	#pragma keylist logevent_elevationInPosition
	struct logevent_elevationLimits {
	  double	private_rcvStamp;    //private
	  unsigned long	limits;
	  long	priority;
	};
	#pragma keylist logevent_elevationLimits
	struct logevent_elevationLockingPinMotionState {
	  double	private_rcvStamp;    //private
	  unsigned short	state;
	  unsigned short	elementState[2];
	  long	priority;
	};
	#pragma keylist logevent_elevationLockingPinMotionState
	struct logevent_elevationMotionState {
	  double	private_rcvStamp;    //private
	  long	state;
	  long	priority;
	};
	#pragma keylist logevent_elevationMotionState
	struct logevent_elevationSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	motionControllerState[12];
	  long	priority;
	};
	#pragma keylist logevent_elevationSystemState
	struct logevent_error {
	  double	private_rcvStamp;    //private
	  boolean	latched;
	  boolean	active;
	  long	code;
	  string	text;
	  long	subsystem;
	  long	priority;
	};
	#pragma keylist logevent_error
	struct logevent_errorCode {
	  double	private_rcvStamp;    //private
	  long	errorCode;
	  string	errorReport;
	  string	traceback;
	  long	priority;
	};
	#pragma keylist logevent_errorCode
	struct logevent_heartbeat {
	  double	private_rcvStamp;    //private
	  boolean	heartbeat;
	  long	priority;
	};
	#pragma keylist logevent_heartbeat
	struct logevent_largeFileObjectAvailable {
	  double	private_rcvStamp;    //private
	  string<256>	url;
	  string<256>	generator;
	  float	version;
	  long	byteSize;
	  string<256>	checkSum;
	  string<256>	mimeType;
	  string<256>	id;
	  long	priority;
	};
	#pragma keylist logevent_largeFileObjectAvailable
	struct logevent_lockingPinsSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	elementPowerState[2];
	  long	motionControllerState[2];
	  long	priority;
	};
	#pragma keylist logevent_lockingPinsSystemState
	struct logevent_logLevel {
	  double	private_rcvStamp;    //private
	  long	level;
	  long	priority;
	};
	#pragma keylist logevent_logLevel
	struct logevent_logMessage {
	  double	private_rcvStamp;    //private
	  string	name;
	  long	level;
	  string	message;
	  string	traceback;
	  string	filePath;
	  string	functionName;
	  long	lineNumber;
	  long	process;
	  long	priority;
	};
	#pragma keylist logevent_logMessage
	struct logevent_mainAxesPowerSupplySystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	priority;
	};
	#pragma keylist logevent_mainAxesPowerSupplySystemState
	struct logevent_mainCabinetSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	priority;
	};
	#pragma keylist logevent_mainCabinetSystemState
	struct logevent_mirrorCoverLocksMotionState {
	  double	private_rcvStamp;    //private
	  unsigned short	state;
	  unsigned short	elementState[4];
	  long	priority;
	};
	#pragma keylist logevent_mirrorCoverLocksMotionState
	struct logevent_mirrorCoverLocksSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	elementPowerState[4];
	  long	motionControllerState[4];
	  long	priority;
	};
	#pragma keylist logevent_mirrorCoverLocksSystemState
	struct logevent_mirrorCoversMotionState {
	  double	private_rcvStamp;    //private
	  unsigned short	state;
	  unsigned short	elementState[4];
	  long	priority;
	};
	#pragma keylist logevent_mirrorCoversMotionState
	struct logevent_mirrorCoversSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	elementPowerState[4];
	  long	motionControllerState[4];
	  long	priority;
	};
	#pragma keylist logevent_mirrorCoversSystemState
	struct logevent_modbusTemperatureControllersSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	elementPowerState[5];
	  boolean	trackAmbient[5];
	  double	setTemperature[5];
	  long	priority;
	};
	#pragma keylist logevent_modbusTemperatureControllersSystemState
	struct logevent_oilSupplySystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  long	coolingPowerState;
	  long	oilPowerState;
	  long	mainPumpPowerState;
	  boolean	trackAmbient[3];
	  double	setTemperature[3];
	  long	priority;
	};
	#pragma keylist logevent_oilSupplySystemState
	struct logevent_safetyInterlocks {
	  double	private_rcvStamp;    //private
	  unsigned long	causes;
	  unsigned long	subcausesEmergencyStop;
	  unsigned long	subcausesLimitSwitch;
	  unsigned long	subcausesDeployablePlatform;
	  unsigned long	subcausesDoorHatchLadder;
	  unsigned long	subcausesMirrorCover;
	  unsigned long	subcausesLockingPin;
	  unsigned long	subcausesCapacitorDoor;
	  unsigned long	subcausesBrakesFailed;
	  unsigned long	effects;
	  long	priority;
	};
	#pragma keylist logevent_safetyInterlocks
	struct logevent_settingVersions {
	  double	private_rcvStamp;    //private
	  string	recommendedSettingsVersion;
	  string	recommendedSettingsLabels;
	  string	settingsUrl;
	  long	priority;
	};
	#pragma keylist logevent_settingVersions
	struct logevent_settingsApplied {
	  double	private_rcvStamp;    //private
	  string<256>	settingsVersion;
	  string	otherSettingsEvents;
	  long	priority;
	};
	#pragma keylist logevent_settingsApplied
	struct logevent_simulationMode {
	  double	private_rcvStamp;    //private
	  long	mode;
	  long	priority;
	};
	#pragma keylist logevent_simulationMode
	struct logevent_softwareVersions {
	  double	private_rcvStamp;    //private
	  string<256>	salVersion;
	  string<256>	xmlVersion;
	  string<256>	openSpliceVersion;
	  string<256>	cscVersion;
	  string	subsystemVersions;
	  long	priority;
	};
	#pragma keylist logevent_softwareVersions
	struct logevent_summaryState {
	  double	private_rcvStamp;    //private
	  long	summaryState;
	  long	priority;
	};
	#pragma keylist logevent_summaryState
	struct logevent_target {
	  double	private_rcvStamp;    //private
	  double	elevation;
	  double	elevationVelocity;
	  double	azimuth;
	  double	azimuthVelocity;
	  double	taiTime;
	  long	trackId;
	  string<256>	tracksys;
	  string<256>	radesys;
	  long	priority;
	};
	#pragma keylist logevent_target
	struct logevent_topEndChillerSystemState {
	  double	private_rcvStamp;    //private
	  long	powerState;
	  boolean	trackAmbient;
	  double	setTemperature;
	  long	priority;
	};
	#pragma keylist logevent_topEndChillerSystemState
	struct logevent_warning {
	  double	private_rcvStamp;    //private
	  boolean	active;
	  long	code;
	  string	text;
	  long	subsystem;
	  long	priority;
	};
	#pragma keylist logevent_warning
	struct ackcmd {
  double	private_rcvStamp;    //private
	  long	cmdSeqNum;
	  long	ack;
	  long	error;
	  string<256>	result;
	  long	host;
	  string	identity;
	  long	origin;
	  long	cmdtype;
	  double	timeout;
	};
	#pragma keylist ackcmd
};

