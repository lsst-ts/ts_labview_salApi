module MTMount {
	 const long MTMount_shared_SummaryState_DisabledState=1;
	 const long MTMount_shared_SummaryState_EnabledState=2;
	 const long MTMount_shared_SummaryState_FaultState=3;
	 const long MTMount_shared_SummaryState_OfflineState=4;
	 const long MTMount_shared_SummaryState_StandbyState=5;
	struct azimuth {
	  double	private_rcvStamp;    //private
	  double	actualPosition;
	  double	demandPosition;
	  double	actualVelocity;
	  double	demandVelocity;
	  double	actualAcceleration;
	  double	actualTorque;
	  double	timestamp;
	};
	#pragma keylist azimuth
	struct azimuthDrives {
	  double	private_rcvStamp;    //private
	  double	current[16];
	  double	timestamp;
	};
	#pragma keylist azimuthDrives
	struct cameraCableWrap {
	  double	private_rcvStamp;    //private
	  double	actualPosition;
	  double	actualVelocity;
	  double	actualAcceleration;
	  double	timestamp;
	};
	#pragma keylist cameraCableWrap
	struct command_abort {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_abort
	struct command_clearError {
	  double	private_rcvStamp;    //private
	  long	mask;
	};
	#pragma keylist command_clearError
	struct command_closeMirrorCovers {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_closeMirrorCovers
	struct command_disable {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_disable
	struct command_disableCameraCableWrapFollowing {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_disableCameraCableWrapFollowing
	struct command_enable {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_enable
	struct command_enableCameraCableWrapFollowing {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_enableCameraCableWrapFollowing
	struct command_enterControl {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_enterControl
	struct command_exitControl {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_exitControl
	struct command_moveToTarget {
	  double	private_rcvStamp;    //private
	  double	azimuth;
	  double	elevation;
	};
	#pragma keylist command_moveToTarget
	struct command_openMirrorCovers {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_openMirrorCovers
	struct command_setAuthList {
	  double	private_rcvStamp;    //private
	  string	authorizedUsers;
	  string	nonAuthorizedCSCs;
	};
	#pragma keylist command_setAuthList
	struct command_setLogLevel {
	  double	private_rcvStamp;    //private
	  long	level;
	};
	#pragma keylist command_setLogLevel
	struct command_setValue {
	  double	private_rcvStamp;    //private
	  string<256>	parametersAndValues;
	};
	#pragma keylist command_setValue
	struct command_standby {
	  double	private_rcvStamp;    //private
	  boolean	value;
	};
	#pragma keylist command_standby
	struct command_start {
	  double	private_rcvStamp;    //private
	  string<256>	settingsToApply;
	};
	#pragma keylist command_start
	struct command_startTracking {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_startTracking
	struct command_stop {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_stop
	struct command_stopTracking {
	  double	private_rcvStamp;    //private
	};
	#pragma keylist command_stopTracking
	struct command_trackTarget {
	  double	private_rcvStamp;    //private
	  double	azimuth;
	  double	azimuthVelocity;
	  double	elevation;
	  double	elevationVelocity;
	  double	taiTime;
	  long	trackId;
	  string	tracksys;
	  string	radesys;
	};
	#pragma keylist command_trackTarget
	struct elevation {
	  double	private_rcvStamp;    //private
	  double	actualPosition;
	  double	demandPosition;
	  double	actualVelocity;
	  double	demandVelocity;
	  double	actualAcceleration;
	  double	actualTorque;
	  double	timestamp;
	};
	#pragma keylist elevation
	struct elevationDrives {
	  double	private_rcvStamp;    //private
	  double	current[12];
	  double	timestamp;
	};
	#pragma keylist elevationDrives
	struct logevent_appliedSettingsMatchStart {
	  double	private_rcvStamp;    //private
	  boolean	appliedSettingsMatchStartIsTrue;
	  long	priority;
	};
	#pragma keylist logevent_appliedSettingsMatchStart
	struct logevent_authList {
	  double	private_rcvStamp;    //private
	  string	authorizedUsers;
	  string	nonAuthorizedCSCs;
	  long	priority;
	};
	#pragma keylist logevent_authList
	struct logevent_axesInPosition {
	  double	private_rcvStamp;    //private
	  boolean	elevation;
	  boolean	azimuth;
	  long	priority;
	};
	#pragma keylist logevent_axesInPosition
	 const long MTMount_shared_AxisState_Unknown=0;
	 const long MTMount_shared_AxisState_Idle=1;
	 const long MTMount_shared_AxisState_Enabled=2;
	 const long MTMount_shared_AxisState_DiscreteMove=3;
	 const long MTMount_shared_AxisState_JogMove=4;
	 const long MTMount_shared_AxisState_Tracking=5;
	 const long MTMount_shared_AxisState_Stopping=6;
	 const long MTMount_shared_AxisState_Fault=7;
	 const long MTMount_shared_DriveState_Unknown=0;
	 const long MTMount_shared_DriveState_Off=1;
	 const long MTMount_shared_DriveState_Moving=2;
	 const long MTMount_shared_DriveState_Stopping=3;
	 const long MTMount_shared_DriveState_Stopped=4;
	 const long MTMount_shared_DriveState_Fault=5;
	 const long MTMount_shared_SubsystemId_AzimuthAxis=100;
	 const long MTMount_shared_SubsystemId_AzimuthDrive=200;
	 const long MTMount_shared_SubsystemId_AzimuthCableWrap=300;
	 const long MTMount_shared_SubsystemId_ElevationAxis=400;
	 const long MTMount_shared_SubsystemId_ElevationDrive=500;
	 const long MTMount_shared_SubsystemId_MainPowerSupply=600;
	 const long MTMount_shared_SubsystemId_EncoderInterfaceBox=700;
	 const long MTMount_shared_SubsystemId_OilSupplySystem=800;
	 const long MTMount_shared_SubsystemId_MirrorCovers=900;
	 const long MTMount_shared_SubsystemId_CameraCableWrap=1000;
	 const long MTMount_shared_SubsystemId_Balance=1100;
	 const long MTMount_shared_SubsystemId_DeployablePlatform=1200;
	 const long MTMount_shared_SubsystemId_Cabinet=1300;
	 const long MTMount_shared_SubsystemId_LockingPins=1400;
	 const long MTMount_shared_SubsystemId_MirrorCoverLocks=1500;
	 const long MTMount_shared_SubsystemId_AzimuthThermal=1600;
	 const long MTMount_shared_SubsystemId_ElevationThermal=1700;
	 const long MTMount_shared_SubsystemId_Interlock=1800;
	 const long MTMount_shared_SubsystemId_TopEndChiller=2200;
	struct logevent_axesState {
	  double	private_rcvStamp;    //private
	  long	elevation;
	  long	azimuth;
	  long	priority;
	};
	#pragma keylist logevent_axesState
	struct logevent_cameraCableWrapFollowing {
	  double	private_rcvStamp;    //private
	  long	enabled;
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapFollowing
	struct logevent_cameraCableWrapState {
	  double	private_rcvStamp;    //private
	  long	state;
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapState
	struct logevent_cameraCableWrapTarget {
	  double	private_rcvStamp;    //private
	  double	position;
	  double	velocity;
	  double	taiTime;
	  long	priority;
	};
	#pragma keylist logevent_cameraCableWrapTarget
	struct logevent_connected {
	  double	private_rcvStamp;    //private
	  boolean	command;
	  boolean	replies;
	  long	priority;
	};
	#pragma keylist logevent_connected
	struct logevent_error {
	  double	private_rcvStamp;    //private
	  boolean	latched;
	  boolean	active;
	  long	code;
	  string	text;
	  long	subsystem;
	  long	priority;
	};
	#pragma keylist logevent_error
	struct logevent_errorCode {
	  double	private_rcvStamp;    //private
	  long	errorCode;
	  string	errorReport;
	  string	traceback;
	  long	priority;
	};
	#pragma keylist logevent_errorCode
	struct logevent_heartbeat {
	  double	private_rcvStamp;    //private
	  boolean	heartbeat;
	  long	priority;
	};
	#pragma keylist logevent_heartbeat
	struct logevent_logLevel {
	  double	private_rcvStamp;    //private
	  long	level;
	  long	priority;
	};
	#pragma keylist logevent_logLevel
	struct logevent_logMessage {
	  double	private_rcvStamp;    //private
	  string	name;
	  long	level;
	  string	message;
	  string	traceback;
	  string	filePath;
	  string	functionName;
	  long	lineNumber;
	  long	process;
	  long	priority;
	};
	#pragma keylist logevent_logMessage
	struct logevent_settingVersions {
	  double	private_rcvStamp;    //private
	  string	recommendedSettingsVersion;
	  string	recommendedSettingsLabels;
	  string	settingsUrl;
	  long	priority;
	};
	#pragma keylist logevent_settingVersions
	struct logevent_settingsApplied {
	  double	private_rcvStamp;    //private
	  string<256>	settingsVersion;
	  string	otherSettingsEvents;
	  long	priority;
	};
	#pragma keylist logevent_settingsApplied
	struct logevent_simulationMode {
	  double	private_rcvStamp;    //private
	  long	mode;
	  long	priority;
	};
	#pragma keylist logevent_simulationMode
	struct logevent_softwareVersions {
	  double	private_rcvStamp;    //private
	  string<256>	salVersion;
	  string<256>	xmlVersion;
	  string<256>	openSpliceVersion;
	  string<256>	cscVersion;
	  string	subsystemVersions;
	  long	priority;
	};
	#pragma keylist logevent_softwareVersions
	struct logevent_summaryState {
	  double	private_rcvStamp;    //private
	  long	summaryState;
	  long	priority;
	};
	#pragma keylist logevent_summaryState
	struct logevent_target {
	  double	private_rcvStamp;    //private
	  double	elevation;
	  double	elevationVelocity;
	  double	azimuth;
	  double	azimuthVelocity;
	  double	taiTime;
	  long	trackId;
	  string<256>	tracksys;
	  string<256>	radesys;
	  long	priority;
	};
	#pragma keylist logevent_target
	struct logevent_warning {
	  double	private_rcvStamp;    //private
	  boolean	active;
	  long	code;
	  string	text;
	  long	subsystem;
	  long	priority;
	};
	#pragma keylist logevent_warning
	struct ackcmd {
  double	private_rcvStamp;    //private
	  long	cmdSeqNum;
	  long	ack;
	  long	error;
	  string<256>	result;
	  long	host;
	  string	identity;
	  long	origin;
	  long	cmdtype;
	  double	timeout;
	};
	#pragma keylist ackcmd
};

